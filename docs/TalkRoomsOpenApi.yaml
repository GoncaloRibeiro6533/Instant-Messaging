openapi: 3.0.1
info:
  title: TalkRooms API
  description: 'System to manage message channels and send messages'
  termsOfService: https://swagger.io/terms/
  version: 1.0.0

tags:
  - name: Users
  - name: Channel
  - name: Messages
  - name: Invitation


paths:
  /user/register:
    post:
      tags:
        - Users
      summary: Register a new user
      requestBody:
        description: Register a new user given a username and password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIn'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: A user with such username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /user/login:
    post:
      tags:
        - Users
      summary: Retrieve a id, a token and a username given a username and a password, a login operation
      requestBody:
        description: Username and password of user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIn'
      responses:
        '200':
          description: User details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserDto'
        '400':
          description: Username missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: A user with such username does not exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /user/edit/username:
    put:
      tags:
        - Users
      security:
        - bearerAuth: [ ]
      summary: Change username
      requestBody:
        description: Register a new user given a username and password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserEditUsernameIn'
      responses:
        '201':
          description: Username changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutputModel'
        '400':
          description: A user with such username already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /user/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Get details of a user
      description: Returns a single user
      parameters:
        - name: id
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserOutputModel'
        '400':
          description: Username missing or invalid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /user/search/{username}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Users
      summary: Search user by username
      description: Returns a list of players by name
      parameters:
        - name: username
          in: path
          description: username
          required: true
          schema:
            type: string
            example: Bob123
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsersOut'
        '400':
          description: Invalid username
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /channel/{channelId}/messages:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Channel
      summary: Get the messages history of a channel
      description: Returns a list of messages, with a limit and offset to do pagination
      parameters:
        - name: channelId
          in: path
          description: channel identifier
          required: true
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: number of messages to return
          required: false
          schema:
            type: integer
            example: 20
        - name: skip
          in: query
          description: number of messages to skip
          required: false
          schema:
            type: integer
            example: 0

      responses:
        '200':
          description: Messages found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessagesDtoOut'
        '400':
          description: Invalid channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Channel not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /channel/{channelId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Channel
      summary: Get details of a channel
      description: Returns a single channel
      parameters:
        - name: channelId
          in: path
          description: Channel identifier
          required: true
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: number of messages to return
          required: false
          schema:
            type: integer
            example: 20
        - name: skip
          in: query
          description: number of messages to skip
          required: false
          schema:
            type: integer
            example: 0
      responses:
        '200':
          description: Channel found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelDto'
        '400':
          description: Invalid channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Channel not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /channel/user/{userId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Channel
      summary: Get channels by user id
      description: Returns a list of channels
      parameters:
        - name: userId
          in: path
          description: user identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Channels found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelsOut'
        '400':
          description: Invalid user
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /channel:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Channel
      summary: Create a new channel
      description: Create a new channel given a name and a visibility
      requestBody:
        description: Channel data
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: channel name
                  example: DevPT
                visibility:
                  type: string
                  description: channel visibility
                  enum: [PUBLIC, PRIVATE]
                  example: PUBLIC
      responses:
        '201':
          description: Channel created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelDto'
        '400':
          description: Invalid channel data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'



  /message:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Messages
      summary: Create new message
      description: Create a new message given a sender, a channel, a content and a timestamp
      requestBody:
        description: Message data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageIn'
      responses:
        '201':
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageDtoOut'
        '400':
          description: Invalid message data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /invitation:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Invitation
      summary: Create a new invitation
      description: Create a new invitation given a sender, a receiver, a channel and a timestamp
      requestBody:
        description: Invitation data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationIn'
      responses:
        '201':
          description: Invitation created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationOut'
        '400':
          description: Invalid invitation data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /invitation/{id}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Invitation
      summary: Get details of a invitation
      description: Returns a single invitation
      parameters:
        - name: id
          in: path
          description: Invitation identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Invitation found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationOut'
        '400':
          description: Invalid invitation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Invitation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
  /invitation/user/{id}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Invitation
      summary: Get invitations of a user
      description: Returns a list of invitations
      parameters:
        - name: id
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: number of messages to return
          required: false
          schema:
            type: integer
            example: 20
        - name: skip
          in: query
          description: number of messages to skip
          required: false
          schema:
            type: integer
            example: 0
      responses:
        '200':
          description: Invitations found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationsOut'
        '400':
          description: Invalid invitation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Invitation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'

  /invitation/{id}/accept:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Invitation
      summary: Mark invitation as used TODO verify, how we are gonna accept and user to channel
      parameters:
        - name: id
          in: path
          description: Invitation identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Invitations accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationOut'
        '400':
          description: Invalid invitation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '404':
          description: Invitation not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppError'


components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    AppError:
      type: object
      description: Application error
      required:
        - code
        - message
      properties:
        code:
          type: number
          format: integer
          description: Internal error code
          example: 1000
        message:
          type: string
          description: Error description message
          example: An error occurred


    UserIn:
      type: object
      description: User data used on register and login
      required:
        - username
        - password
      properties:
        name:
          type: string
          description: username
          example: Bob
        password:
          type: string
          description : user password
          example: password

    UserEditUsernameIn:
      type: object
      description: User data used on register and login
      required:
        - username
        - newUsername
      properties:
        name:
          type: string
          description: username
          example: Bob
        newUsername:
          type: string
          description : user new username
          example: Bob456

    UserDto:
      type: object
      description: User details, to retreive after login or register succeds
      required:
        - token
        - id
        - username
        - channels
        - invitations
        - unreadMessages
      properties:
        token:
          type: string
          description: user token
          example: e77b4661-dc0e-4999-80e1-72bfcb9f5c23
        id:
          type: integer
          description: user id
          example: 1
        username:
          type: string
          description: user username
          example: Bob123
        channels:
          type: array
          items:
            $ref: '#/components/schemas/ChannelsOut'
        invitations:
          type: array
          items:
            $ref: '#/components/schemas/InvitationsOut'
        unreadMessages:
          type: array
          items:
            $ref: '#/components/schemas/UnreadMessages'

    UserOutputModel:
      type: object
      description: User details
      required:
        - id
        - username
      properties:
        id:
          type: integer
          description: user id
          example: 1
        username:
          type: string
          description: username
          example: Bob123

    UsersOut:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserOutputModel'



    MessageDtoOut:
      type: object
      description: Message details
      required:
        - id
        - sender
        - content
        - timestamp
      properties:
        id:
          type: integer
          description: Message id
          example: 101
        sender:
          $ref: '#/components/schemas/UserOutputModel'
        content:
          type: string
          description: Message content
          example: "Hello, world!"
        timestamp:
          type: string
          format: date-time
          description: Time the message was sent
          example: "2024-10-01T12:00:00Z"

    MessageIn:
      type: object
      description: Message details
      required:
        - id
        - sender
        - channel
        - content
      properties:
        id:
          type: integer
          description: Message id
          example: 101
        sender:
          $ref: '#/components/schemas/UserOutputModel'
        channel:
          $ref: '#/components/schemas/ChannelOut'
        content:
          type: string
          description: Message content
          example: "Hello, world!"


    MessagesDtoOut:
      type: object
      properties:
        channel:
          $ref: '#/components/schemas/ChannelOut'
        nMessages:
          type: integer
          description: number of results
          example: 20
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageDtoOut'


    ChannelDto:
      description: Channel representation
      required:
        - id
        - name
        - creator
        - visibility
        - messages
        - users
      properties:
        id:
          type: integer
          description: channel id
          example: 1
        name:
          type: string
          description: channel name
          example: DevPT
        creator:
          $ref: '#/components/schemas/UserOutputModel'
        visibility:
          type: string
          description: channel visibility
          enum: [PUBLIC, PRIVATE]
          example: PUBLIC
        messages:
          $ref: '#/components/schemas/MessagesDtoOut'
        users:
          type: array
          description: List of users and their roles in the channel
          items:
            type: object
            properties:
              user:
                $ref: '#/components/schemas/UserOutputModel'
              role:
                type: string
                description: Role of the user in the channel
                enum: [ADMIN, READ_ONLY, READ_WRITE]
                example: ADMIN

    ChannelOut:
      type: object
      description: Channel details
      required:
        - id
        - name
        - visibility
      properties:
        id:
          type: integer
          description: Channel id
          example: 1
        name:
          type: string
          description: Channel name
          example: DevPT


    ChannelsOut:
      type: object
      properties:
        nChannels:
          type: integer
          description: number of results
          example: 20
        channels:
          type: array
          items:
            $ref: '#/components/schemas/ChannelOut'

    UserDtoIn:
      type: object
      description: User details
      required:
        - id
        - username
      properties:
        id:
          type: integer
          description: User identifier
          example: 1
        name:
          type: string
          description: Username
          example: Bob123

    InvitationIn:
      type: object
      description: Invitation details
      required:
        - sender
        - channel
        - role
      properties:
        sender:
          $ref: '#/components/schemas/UserOutputModel'
        channel:
          $ref: '#/components/schemas/ChannelOut'
        role:
          type: string
          description: Role of the user in the channel
          enum: [ADMIN, READ_ONLY, READ_WRITE]
          example: READ_ONLY

    InvitationOut:
      type: object
      description: Invitation details
      required:
        - sender
        - channel
        - role
        - timestamp
      properties:
        sender:
          $ref: '#/components/schemas/UserOutputModel'
        channel:
          $ref: '#/components/schemas/ChannelOut'
        role:
          type: string
          description: Role of the user in the channel
          enum: [ADMIN, READ_ONLY, READ_WRITE]
          example: READ_ONLY
        timestamp:
          type: string
          format: date-time
          description: Time the message was sent
          example: "2024-10-01T12:00:00Z"

    InvitationsOut:
      type: object
      properties:
        nInvitations:
          type: integer
          description: number of results
          example: 20
        channels:
          type: array
          items:
            $ref: '#/components/schemas/InvitationOut'

    UnreadMessagePerChannel:
      type: object
      description: Invitation details
      required:
        - channel
        - messages
      properties:
        channel:
          $ref: '#/components/schemas/ChannelOut'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageDtoOut'

    UnreadMessages:
      type: object
      properties:
        nMessages:
          type: integer
          description: number of results
          example: 20
        messages:
          type: array
          items:
            $ref: '#/components/schemas/UnreadMessagePerChannel'


