openapi: 3.0.1
info:
  title: TalkRooms API
  description: 'System to manage message channels and send messages'
  termsOfService: https://swagger.io/terms/
  version: 1.0.0
servers:
  - url: http://localhost:8080/api
tags:
  - name: User
  - name: Channels
  - name: Messages
  - name: Invitations


paths:
  /user/register/{invitationId}:
    post:
      tags:
        - Users
      summary: Register a new user with invitation
      parameters:
        - name: invitationId
          in: path
          description: Invitation identifier
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        description: Register a new user given a username and password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterInput'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: A user with such username already exists
        '500':
          description: Internal server error

  /user/register:
    post:
      tags:
        - Users
      summary: Register a new user
      requestBody:
        description: Register a new user given a username and password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserRegisterInput'
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: A user with such username already exists
        '500':
          description: Internal server error



  /user/login:
    post:
      tags:
        - Users
      summary: Retrieve a id, a token and a username given a username and a password, a login operation
      requestBody:
        description: Username and password of user
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthenticatedUser'
      responses:
        '201':
          description: User details
        '400':
          description: Username missing or invalid
        '404':
          description: A user with such username does not exists
        '500':
          description: Internal server error


  /user/logout:
    post:
      tags:
        - Users
      security:
        - bearerAuth: [ ]
      summary: Logout a user
      responses:
        '200':
          description: User details
        '401':
          description: Unauthorized
        '404':
          description: A user with such username does not exists
        '500':
          description: Internal server error


  /user/edit/username:
    put:
      tags:
        - Users
      security:
        - bearerAuth: [ ]
      summary: Change username
      requestBody:
        description: New username
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UsernameUpdateInput'
      responses:
        '200':
          description: Username changed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: A user with such username already exists
        '500':
          description: Internal server error


  /user/{id}:
    get:
      security:
        - bearerAuth: []
      tags:
        - Users
      summary: Get details of a user
      description: Returns a single user
      parameters:
        - name: id
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Username missing or invalid
        '401':
          description: Unauthorized

        '404':
          description: User not found
        '500':
          description: Internal server error


  /user/search/{username}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Users
      summary: Search user by username
      description: Returns a list of players by name
      parameters:
        - name: username
          in: path
          description: username
          required: true
          schema:
            type: string
            example: Bob123
        - name: limit
          in: query
          description: number of users to return
          required: false
          schema:
            type: integer
            example: 20
        - name: skip
          in: query
          description: number of users to skip
          required: false
          schema:
            type: integer
            example: 0
      responses:
        '200':
          description: User found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '400':
          description: Invalid username
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

  /invitation/register:
    post:
      tags:
        - Invitations
      summary: Create a new register invitation
      requestBody:
        description: Details of register invitation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationInputModelRegister'
      responses:
        '201':
          description: Invitation registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationOutputModelRegister'
        '400':
          description: Email not valid
        '500':
          description: Internal server error

  /invitation/channel:
    post:
      tags:
        - Invitations
      summary: Create a new channel invitation
      requestBody:
        description: Details of channel invitation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/InvitationInputModelChannel'
      responses:
        '201':
          description: Invitation registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationOutputModelChannel'
        '400':
          description: Email not valid
        '500':
          description: Internal server error


  /invitation/accept/{invitationId}:
    put:
      tags:
        - Invitations
      security:
        - bearerAuth: [ ]
      summary: accept invitation
      parameters:
        - name: invitationId
          in: path
          description: Invitation identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Invitation accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Channel'
        '400':
          description: User does not correspond to receiver of invitation
        '500':
          description: Internal server error


  /invitation/decline/{invitationId}:
    put:
      tags:
        - Invitations
      security:
        - bearerAuth: [ ]
      summary: Decline
      parameters:
        - name: invitationId
          in: path
          description: Invitation identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Invitation accepted
        '400':
          description: User does not correspond to receiver of invitation
        '500':
          description: Internal server error

  /invitation/user/invitations:
    get:
      tags:
        - Invitations
      summary: Get user invitations
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InvitationList'
        '500':
          description: Internal server error


  /channels:
    post:
      tags:
        - Channels
      summary: Create a channel
      requestBody:
        description: Details of channel
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateChannelInputModel'
      responses:
        '201':
          description: Channel registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelOutputModel'
        '400':
          description: Invalid channel name
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

  /channels/{channelId}/add/{userId}/{role}:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Channels
      summary: Add a user to a channel
      parameters:
        - name: channelId
          in: path
          description: channel identifier
          required: true
          schema:
            type: integer
            example: 1
        - name: userId
          in: path
          description: user identifier
          required: true
          schema:
            type: integer
            example: 1
        - name: role
          in: path
          description: user role
          required: true
          schema:
            type: string
            description: Role of the user in the channel
            enum: [ADMIN, READ_ONLY, READ_WRITE]
            example: READ_ONLY
      responses:
        '200':
          description: User added to channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelOutputModel'
        '400':
          description: Invalid channel
        '401':
          description: Unauthorized
        '404':
          description: Channel not found
        '500':
          description: Internal server error

  /channels/{id}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Channels
      summary: Get details of a channel
      description: Returns a single channel
      parameters:
        - name: id
          in: path
          description: Channel identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Channel found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelOutputModel'
        '400':
          description: Invalid channel
        '401':
          description: Unauthorized
        '404':
          description: Channel not found
        '500':
          description: Internal server error

  /channels/search/{name}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Channels
      summary: Search channel by name
      description: Returns a list of channel
      parameters:
        - name: name
          in: path
          description: Channel name
          required: true
          schema:
            type: string
            example: DAW
        - name: limit
          in: query
          description: number of channels to return
          required: false
          schema:
            type: integer
            example: 20
        - name: skip
          in: query
          description: number of channels to skip
          required: false
          schema:
            type: integer
            example: 0
      responses:
        '200':
          description: Channel found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelOutputModel'
        '400':
          description: Invalid channel
        '401':
          description: Unauthorized
        '404':
          description: Channel not found
        '500':
          description: Internal server error



  /channels/{channelId}/members:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Channels
      summary: Get channels by user id
      description: Returns a list of channels
      parameters:
        - name: channelId
          in: path
          description: channel identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Members found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserList'
        '400':
          description: Invalid user
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

  /channels/user/{userId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Channels
      summary: Get channels by user id
      description: Returns a list of channels
      parameters:
        - name: userId
          in: path
          description: user identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Channels found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelList'
        '400':
          description: Invalid user
        '401':
          description: Unauthorized
        '404':
          description: User not found
        '500':
          description: Internal server error

  /channels/{channelId}/{name}:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Channels
      summary: Update channel name
      description: Create a new channel given a name and a visibility
      parameters:
        - name: channelId
          in: path
          description: Channel identifier
          required: true
          schema:
            type: integer
            example: 1
        - name: name
          in: path
          description: Channel new name
          required: true
          schema:
            type: string
            example: PDM
      responses:
        '200':
          description: Channel created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelOutputModel'
        '400':
          description: Invalid channel data
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /channels/{channelId}/leave/{userId}:
    put:
      security:
        - bearerAuth: [ ]
      tags:
        - Channels
      summary: Remove user from channel
      description: Remove user from channel
      parameters:
        - name: channelId
          in: path
          description: Channel identifier
          required: true
          schema:
            type: integer
            example: 1
        - name: userId
          in: path
          description: User identifier
          required: true
          schema:
            type: integer
            example: 23
      responses:
        '200':
          description: User removed from channel
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChannelOutputModel'
        '400':
          description: Invalid channel data
        '401':
          description: Unauthorized
        '500':
          description: Internal server error


  /messages:
    post:
      security:
        - bearerAuth: [ ]
      tags:
        - Messages
      summary: Create new message
      description: Create a new message given a sender, a channel, a content and a timestamp
      requestBody:
        description: Message data
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MessageInputModel'
      responses:
        '201':
          description: Message created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageOutputModel'
        '400':
          description: Invalid message data
        '401':
          description: Unauthorized
        '500':
          description: Internal server error

  /messages/{id}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Messages
      summary: Get message by  id
      description: Returns a message
      parameters:
        - name: id
          in: path
          description: message identifier
          required: true
          schema:
            type: integer
            example: 1
      responses:
        '200':
          description: Message found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageOutputModel'
        '400':
          description: Invalid identifier
        '401':
          description: Unauthorized
        '404':
          description: Message not found
        '500':
          description: Internal server error

  /messages/history/{channelId}:
    get:
      security:
        - bearerAuth: [ ]
      tags:
        - Messages
      summary: Get message by channel id
      description: Returns a list of message
      parameters:
        - name: channelId
          in: path
          description: channel identifier
          required: true
          schema:
            type: integer
            example: 1
        - name: limit
          in: query
          description: number of messages to return
          required: false
          schema:
            type: integer
            example: 20
        - name: skip
          in: query
          description: number of messages to skip
          required: false
          schema:
            type: integer
            example: 0
      responses:
        '200':
          description: Messages found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MessageHistoryOutputModel'
        '400':
          description: Invalid identifier
        '401':
          description: Unauthorized
        '404':
          description: Message not found
        '500':
          description: Internal server error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:

    UserIdentifiers:
      type: object
      description: User details
      required:
        - id
        - username
      properties:
        id:
          type: integer
          description: user id
          example: 1
        username:
          type: string
          description: username
          example: Bob123

    CreateChannelInputModel:
      type: object
      description: Data to create channel
      required:
        - name
        - visibility
      properties:
        name:
          type: string
          description: channel name
          example: DAW
        visibility:
          type: string
          description: channel visibility
          enum: [PUBLIC, PRIVATE]
          example: PUBLIC

    ChannelOutputModel:
      type: object
      description: Data that represents a channel
      required:
        - id
        - name
        - creator
        - visibility
      properties:
        id:
          type: integer
          description: channel identifier
          example: 1
        creator:
          $ref: '#/components/schemas/UserIdentifiers'
        name:
          type: string
          description: channel name
          example: DAW
        visibility:
          type: string
          description: channel visibility
          enum: [PUBLIC, PRIVATE]
          example: PUBLIC

    ChannelList:
      type: object
      properties:
        nChannels:
          type: integer
          description: number of results
          example: 20
        channels:
          type: array
          items:
            $ref: '#/components/schemas/ChannelOutputModel'


    InvitationInputModelChannel:
      type: object
      description: Invitation channel input details
      required:
        - receiverId
        - channelId
        - role
      properties:
        receiverId:
          type: integer
          description: receiver identifier
          example: 1
        channelId:
          type: integer
          description: channel identifier
          example: 1
        role:
          type: string
          description: Role of the user in the channel
          enum: [ADMIN, READ_ONLY, READ_WRITE]
          example: READ_ONLY

    InvitationOutputModelChannel:
      type: object
      description: Invitation channel details
      required:
        - id
        - sender
        - receiver
        - channel
        - role
        - timestamp
      properties:
        id:
          type: integer
          description: invitation identifier
          example: 1
        sender:
          $ref: '#/components/schemas/UserIdentifiers'
        receiver:
          $ref: '#/components/schemas/UserIdentifiers'
        channel:
          $ref: '#/components/schemas/ChannelOutputModel'
        role:
          type: string
          description: Role of the user in the channel
          enum: [ADMIN, READ_ONLY, READ_WRITE]
          example: READ_ONLY
        timestamp:
          type: string
          format: date-time
          description: Time the invitation was created
          example: "2024-10-01T12:00:00Z"

    InvitationInputModelRegister:
      type: object
      description: Invitation channel input details
      required:
        - email
        - channelId
        - role
      properties:
        email:
          type: string
          description: receiver email
          example: bob@example.com
        channelId:
          type: integer
          description: channel identifier
          example: 1
        role:
          type: string
          description: Role of the user in the channel
          enum: [ADMIN, READ_ONLY, READ_WRITE]
          example: READ_ONLY

    InvitationOutputModelRegister:
      type: object
      description: Invitation register details
      required:
        - id
        - sender
        - email
        - channel
        - role
        - timestamp
      properties:
        id:
          type: integer
          description: invitation identifier
          example: 1
        sender:
          $ref: '#/components/schemas/UserIdentifiers'
        email:
          type: string
          description: receiver email
          example: bob@example.com
        channel:
          $ref: '#/components/schemas/ChannelOutputModel'
        role:
          type: string
          description: Role of the user in the channel
          enum: [ADMIN, READ_ONLY, READ_WRITE]
          example: READ_ONLY
        timestamp:
          type: string
          format: date-time
          description: Time the invitation was created
          example: "2024-10-01T12:00:00Z"


    InvitationList:
      type: object
      properties:
        nInvitations:
          type: integer
          description: number of results
          example: 20
        channels:
          type: array
          items:
            $ref: '#/components/schemas/InvitationOutputModelChannel'

    UserList:
      type: object
      properties:
        nUsers:
          type: integer
          description: number of results
          example: 20
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserIdentifiers'


    UserLoginCredentialsInput:
      type: object
      description: User credentials for login
      required:
        - username
        - password
      properties:
        username:
          type: string
          description: user username
          example: Bob
        password:
          type: string
          description: user password
          example: Strong_but_known_password1234

    UsernameUpdateInput:
      type: object
      description: User new username
      required:
        - newUsername
      properties:
        newUsername:
          type: string
          description: new username
          example: Bob1234

    UserRegisterInput:
      type: object
      description: User details for register
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          description: User username
          example: Bob
        email:
          type: string
          description: User email
          example: bob@example.com
        password:
          type: string
          description: User password
          example: Strong_but_known_password1234

    MessageInputModel:
      type: object
      description: Message details for creation
      required:
        - channelId
        - content
      properties:
        channelId:
          type: integer
          description: channel identifier
        content:
          type: string
          description: Message content
          example: This a message.

    ChannelIdentifiers:
      type: object
      description: Channel details
      required:
        - id
        - name
      properties:
        id:
          type: integer
          description: channel id
          example: 1
        name:
          type: string
          description: Channel name
          example: DAW


    MessageOutputModel:
      type: object
      description: Data that represents a message
      required:
        - msgid
        - sender
        - channel
        - content
        - timestamp
      properties:
        id:
          type: integer
          description: channel identifier
          example: 1
        sender:
          $ref: '#/components/schemas/UserIdentifiers'
        channel:
          $ref: '#/components/schemas/ChannelIdentifiers'
        content:
          type: string
          description: Message content
          example: This is a message.
        timestamp:
          type: string
          format: date-time
          description: Time the message was created
          example: "2024-10-01T12:00:00Z"

    MessageInfoOutputModel:
      type: object
      description: Data that represents a message
      required:
        - msgid
        - sender
        - content
        - timestamp
      properties:
        id:
          type: integer
          description: channel identifier
          example: 1
        sender:
          $ref: '#/components/schemas/UserIdentifiers'
        content:
          type: string
          description: Message content
          example: This is a message.
        timestamp:
          type: string
          format: date-time
          description: Time the message was created
          example: "2024-10-01T12:00:00Z"

    MessageHistoryOutputModel:
      type: object
      description: Data that represents a kist of message
      required:
        - channel
        - messages
      properties:
        channel:
          $ref: '#/components/schemas/ChannelIdentifiers'
        messages:
          type: array
          items:
            $ref: '#/components/schemas/MessageInfoOutputModel'

    User:
      type: object
      description: User details
      required:
        - id
        - username
        - email
      properties:
        id:
          type: integer
          description: user identifier
        username:
          type: string
          description: user username
          example: Bob
        email:
          type: string
          description: user email
          example: bob@example.pt

    AuthenticatedUser:
      type: object
      description: User details
      required:
        - user
        - token
      properties:
        user:
          $ref: '#/components/schemas/User'
        token:
          type: string
          description: session token
          example: absbadbdaksjdad_aksdjakld1223


    Channel:
      type: object
      description: Channel details
      required:
        - id
        - name
        - creator
        - visibility
      properties:
        id:
          type: integer
          description: user identifier
        name:
          type: string
          description: Channel name
          example: DAW
        creator:
          $ref: '#/components/schemas/User'
        visibility:
          type: string
          description: channel visibility
          enum: [PUBLIC, PRIVATE]
          example: PUBLIC
